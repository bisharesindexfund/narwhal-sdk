{"version":3,"file":"narwhal-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi';\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string;\n\nexport enum ChainId {\n  MAINNET = 56,\n  TESTNET = 97,\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS_APE = '0x0841BD0B734E4F5853f0dD8d7Ea041c241fb0Da6';\n\nexport const FACTORY_ADDRESS_CAKE = '0xBCfCcbde45cE874adCB698cC183deBcF17952812';\n\nexport const INIT_CODE_HASH_APE = '0xf4ccce374816856d11f00e4069e7cada164065686fbef53c6167a63ec2fd8c5b';\n\nexport const INIT_CODE_HASH_CAKE = '0xd0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66';\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000);\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0);\nexport const ONE = JSBI.BigInt(1);\nexport const TWO = JSBI.BigInt(2);\nexport const THREE = JSBI.BigInt(3);\nexport const FIVE = JSBI.BigInt(5);\nexport const TEN = JSBI.BigInt(10);\nexport const _100 = JSBI.BigInt(100);\nexport const _997 = JSBI.BigInt(997);\nexport const _1000 = JSBI.BigInt(1000);\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n};\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant';\nimport { ChainId } from '../constants';\nimport { validateAndParseAddress } from '../utils';\nimport { Currency } from './currency';\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId;\n  public readonly address: string;\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name);\n    this.chainId = chainId;\n    this.address = validateAndParseAddress(address);\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true;\n    }\n    return this.chainId === other.chainId && this.address === other.address;\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS');\n    invariant(this.address !== other.address, 'ADDRESSES');\n    return this.address.toLowerCase() < other.address.toLowerCase();\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB);\n  } else if (currencyA instanceof Token) {\n    return false;\n  } else if (currencyB instanceof Token) {\n    return false;\n  } else {\n    return currencyA === currencyB;\n  }\n}\n\nexport const WBNB = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.TESTNET]: new Token(\n    ChainId.TESTNET,\n    '0x0000000000000000000000000000000000000000',\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  )\n};\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price';\nimport { TokenAmount } from './fractions/tokenAmount';\nimport invariant from 'tiny-invariant';\nimport JSBI from 'jsbi';\nimport { pack, keccak256 } from '@ethersproject/solidity';\nimport { getCreate2Address } from '@ethersproject/address';\n\nimport {\n  BigintIsh,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId,\n  INIT_CODE_HASH_APE,\n  INIT_CODE_HASH_CAKE,\n  FACTORY_ADDRESS_APE,\n  FACTORY_ADDRESS_CAKE\n} from '../constants';\n\nimport { sqrt, parseBigintIsh } from '../utils';\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors';\nimport { Token } from './token';\n\nlet PAIR_ADDRESS_CACHE: {\n  apeswap: { [token0Address: string]: { [token1Address: string]: string; }; },\n  pancakeswap: { [token0Address: string]: { [token1Address: string]: string; }; };\n} = {\n  apeswap: {},\n  pancakeswap: {}\n};\n\nexport class Pair {\n  public readonly liquidityToken: Token;\n  private readonly tokenAmounts: [TokenAmount, TokenAmount];\n\n  public static getAddress(tokenA: Token, tokenB: Token, pancakeswap: boolean): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]; // does safety checks\n    const key = pancakeswap ? 'pancakeswap' : 'apeswap';\n    if (PAIR_ADDRESS_CACHE[key]?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE[key] = {\n        ...PAIR_ADDRESS_CACHE[key],\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE[key]?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            pancakeswap ? FACTORY_ADDRESS_CAKE : FACTORY_ADDRESS_APE,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            pancakeswap ? INIT_CODE_HASH_CAKE : INIT_CODE_HASH_APE\n          )\n        }\n      };\n    }\n\n    return PAIR_ADDRESS_CACHE[key][tokens[0].address][tokens[1].address];\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount, public pancakeswap: boolean) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA];\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, pancakeswap),\n      18,\n      'APE-V2', //TODO\n      'ApeSwap V2'\n    );\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount];\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1);\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw);\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw);\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN');\n    return token.equals(this.token0) ? this.token0Price : this.token1Price;\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId;\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token;\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token;\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0];\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1];\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN');\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1;\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN');\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError();\n    }\n    const inputReserve = this.reserveOf(inputAmount.token);\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0);\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997);\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw);\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee);\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    );\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError();\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.pancakeswap)];\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN');\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError();\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token);\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0);\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000);\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997);\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    );\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.pancakeswap)];\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY');\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA];\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN');\n\n    let liquidity: JSBI;\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY);\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw);\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw);\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1;\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError();\n    }\n    return new TokenAmount(this.liquidityToken, liquidity);\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN');\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY');\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY');\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY');\n\n    let totalSupplyAdjusted: TokenAmount;\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply;\n    } else {\n      invariant(!!kLast, 'K_LAST');\n      const kLastParsed = parseBigintIsh(kLast);\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw));\n        const rootKLast = sqrt(kLastParsed);\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast));\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast);\n          const feeLiquidity = JSBI.divide(numerator, denominator);\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity));\n        } else {\n          totalSupplyAdjusted = totalSupply;\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply;\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    );\n  }\n}\n","import { ChainId } from '../constants';\nimport invariant from 'tiny-invariant';\n\nimport { Currency, ETHER } from './currency';\nimport { Token, WBNB } from './token';\nimport { Pair } from './pair';\nimport { Price } from './fractions/price';\n\nexport function encodePathToken(token: Token, pancakeswap: boolean) {\n  return [\n    '0x',\n    token.address.slice(2).padStart(62, '0'),\n    pancakeswap ? '01' : '00' // TODO check it twice\n  ].join('');\n}\n\nexport class Route {\n  public readonly pairs: Pair[];\n  public readonly path: Token[];\n  public readonly input: Currency;\n  public readonly output: Currency;\n  public readonly midPrice: Price;\n  public readonly encodedPath: string[];\n\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS');\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    );\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n      (input === ETHER && pairs[0].involvesToken(WBNB[pairs[0].chainId])),\n      'INPUT'\n    );\n    invariant(\n      typeof output === 'undefined' ||\n      (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n      (output === ETHER && pairs[pairs.length - 1].involvesToken(WBNB[pairs[0].chainId])),\n      'OUTPUT'\n    );\n\n    const path: Token[] = [input instanceof Token ? input : WBNB[pairs[0].chainId]];\n    const encodedPath: string[] = [\n      encodePathToken(path[0], pairs[0].pancakeswap)\n    ];\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i];\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH');\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0;\n      path.push(output);\n      let pancakeswap = false;\n      if (i < pairs.length - 1) {\n        pancakeswap = pairs[i + 1].pancakeswap;\n      }\n      encodedPath.push(encodePathToken(output, pancakeswap));\n    }\n\n    this.pairs = pairs;\n    this.path = path;\n    this.encodedPath = encodedPath;\n    this.midPrice = Price.fromRoute(this);\n    this.input = input;\n    this.output = output ?? path[path.length - 1];\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId;\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WBNB } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WBNB[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WBNB[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Narwhal Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    // const path: string[] = trade.route.path.map(token => token.address)\n    const encodedPath: string[] = trade.route.encodedPath;\n    const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, encodedPath, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, encodedPath, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, encodedPath, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, encodedPath, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, encodedPath, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, encodedPath, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts';\nimport { getNetwork } from '@ethersproject/networks';\nimport { getDefaultProvider } from '@ethersproject/providers';\nimport { TokenAmount } from './entities/fractions/tokenAmount';\nimport { Pair } from './entities/pair';\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json';\nimport invariant from 'tiny-invariant';\nimport ERC20 from './abis/ERC20.json';\nimport { ChainId } from './constants';\nimport { Token } from './entities/token';\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number; }; } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n};\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() { }\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n          TOKEN_DECIMALS_CACHE = {\n            ...TOKEN_DECIMALS_CACHE,\n            [chainId]: {\n              ...TOKEN_DECIMALS_CACHE?.[chainId],\n              [address]: decimals\n            }\n          };\n          return decimals;\n        });\n    return new Token(chainId, address, parsedDecimals, symbol, name);\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   * @param pancakeswap pancakeswap if true, apeswap if false\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    pancakeswap: boolean,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID');\n    const address = Pair.getAddress(tokenA, tokenB, pancakeswap);\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves();\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0];\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]), true);\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","INIT_CODE_HASH_APE","INIT_CODE_HASH_CAKE","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","ETHER","Token","chainId","equals","other","this","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WBNB","MAINNET","TESTNET","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","PAIR_ADDRESS_CACHE","apeswap","pancakeswap","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","key","undefined","_PAIR_ADDRESS_CACHE$k3","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","encodePathToken","padStart","join","Route","input","output","every","encodedPath","i","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}